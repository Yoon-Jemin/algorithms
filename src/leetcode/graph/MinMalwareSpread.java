package leetcode.graph;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MinMalwareSpread {

    public static void main(String[] args) {
        int[][] graph = {
                {1, 1, 0},
                {1, 1, 0},
                {0, 0 ,1}
        };
        int[] initial = {0, 1, 2};
        System.out.println(minMalwareSpread(graph, initial));
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int minInfected = Integer.MAX_VALUE;
        int answer = 0;
        Arrays.sort(initial);

        for (int i = initial.length - 1; i >= 0; i--) {
            int remove = initial[i];
            int infected = calculateInfected(remove, graph, initial);

            if (infected <= minInfected) {
                minInfected = infected;
                answer = remove;
            }
        }

        return answer;
    }

    public static int calculateInfected(int remove, int[][] graph, int[] initial) {
        int infected = 0;

        Set<Integer> visited = new HashSet<>();
        for (int i = 0; i < initial.length; i++) {
            if (initial[i] == remove) continue;
            if (visited.contains(initial[i])) continue;
            infected += DFS(initial[i], graph, visited);
        }

        return infected;
    }

    public static int DFS(int start, int[][] graph, Set<Integer> visited) {
        int count = 1;
        visited.add(start);
        for (int i = 0; i < graph[start].length; i++) {
            if (graph[start][i] == 1 && !visited.contains(i)) {
                visited.add(i);
                count += DFS(i, graph, visited);
            }
        }

        return count;
    }
}
